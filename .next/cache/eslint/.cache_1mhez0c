[{"/Users/curauser/Projects/moerabaya.github.io/pages/404.tsx":"1","/Users/curauser/Projects/moerabaya.github.io/pages/_app.tsx":"2","/Users/curauser/Projects/moerabaya.github.io/pages/about.tsx":"3","/Users/curauser/Projects/moerabaya.github.io/pages/api/hello.ts":"4","/Users/curauser/Projects/moerabaya.github.io/pages/blog.tsx":"5","/Users/curauser/Projects/moerabaya.github.io/pages/index.tsx":"6","/Users/curauser/Projects/moerabaya.github.io/pages/posts/[slug].tsx":"7","/Users/curauser/Projects/moerabaya.github.io/pages/work/[slug].tsx":"8","/Users/curauser/Projects/moerabaya.github.io/components/Footer.tsx":"9","/Users/curauser/Projects/moerabaya.github.io/components/Menu.tsx":"10"},{"size":271,"mtime":1653580879842,"results":"11","hashOfConfig":"12"},{"size":243,"mtime":1653508519649,"results":"13","hashOfConfig":"12"},{"size":2153,"mtime":1653580997132,"results":"14","hashOfConfig":"12"},{"size":307,"mtime":1653149313807,"results":"15","hashOfConfig":"12"},{"size":2924,"mtime":1653581207403,"results":"16","hashOfConfig":"12"},{"size":5268,"mtime":1653581044322,"results":"17","hashOfConfig":"12"},{"size":2820,"mtime":1653581092594,"results":"18","hashOfConfig":"12"},{"size":3409,"mtime":1653581129684,"results":"19","hashOfConfig":"12"},{"size":1512,"mtime":1653581150354,"results":"20","hashOfConfig":"12"},{"size":2235,"mtime":1653575845626,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1no6jvj",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/curauser/Projects/moerabaya.github.io/pages/404.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/_app.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/about.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/api/hello.ts",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/blog.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/index.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/posts/[slug].tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/pages/work/[slug].tsx",["53"],[],"import { MDXRemote } from 'next-mdx-remote';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport React, { useEffect } from 'react'\nimport fs from 'fs';\nimport path from 'path';\nimport { serialize } from 'next-mdx-remote/serialize';\nimport matter from 'gray-matter';\nimport Image from 'next/image';\nimport rehypeImgSize from 'rehype-img-size';\n\n\nconst components = {\n  // Custom image - here you can customize the image layout: https://nextjs.org/docs/api-reference/next/image#layout\n  img: ({ src, height, width, ...rest }: any) => (\n    // layout=\"responsive\" makes the image fill the container width wise - I find it looks nicer for blog posts\n    <Image layout=\"responsive\" src={src} height={height} width={width} {...rest} />\n  ),\n}\nconst Project = ({ mdxSource, meta }: any) => {\n  const {pathname} = useRouter();\n  useEffect(() => {\n    \n  }, [])\n  return (\n    <div className=\"project-content\">\n      <Head>\n      <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n        <title>{meta.title} - Mohammed Rabay&apos;a</title>\n        \n        {/* <!-- Primary Meta Tags --> */}\n        <meta name=\"title\" content={meta.title + \" | Mohammed Rabay'a\"} />\n        <meta name=\"description\" content={meta.description} />\n\n        {/* <!-- Open Graph / Facebook --> */}\n        <meta property=\"og:url\" content={\"https://moerabaya.com/\" + pathname} />\n        <meta property=\"og:title\" content={meta.title + \" | Mohammed Rabay'a\"} />\n        <meta property=\"og:description\" content={meta.description} />\n        <meta property=\"og:image\" content={meta?.metaimage ? require(meta?.metaimage) : require('../../assets/images/metaimage.png')} />\n\n        {/* <!-- Twitter --> */}\n        <meta property=\"twitter:url\" content={\"https://moerabaya.com/\" + pathname} />\n        <meta property=\"twitter:title\" content={meta.title + \" | Mohammed Rabay'a\"} />\n        <meta property=\"twitter:description\" content={meta.description} />\n        <meta property=\"twitter:image\" content={meta?.metaimage ? require(meta?.metaimage) : require('../../assets/images/metaimage.png')} />\n      </Head>\n\n      <header>\n        <div className=\"container\">\n          <h1 className='title'><mark style={{backgroundColor: meta.color ?? \"white\"}}>{meta.description}</mark></h1>\n        </div>\n      </header>\n      <div className=\"container\">\n        <div className=\"content\">\n          <MDXRemote {...mdxSource} components={components} />\n        </div>\n        {/* {post.contents} */}\n      </div>\n    </div>\n  )\n}\n\nexport default Project;\n\nconst getStaticPaths = async () => {\n  const files = fs.readdirSync(path.join('projects'))\n\n  const paths = files.map(filename => ({\n    params: {\n      slug: filename.replace('.mdx', '')\n    }\n  }))\n\n  return {\n    paths,\n    fallback: false\n  }\n}\n\nconst getStaticProps = async ({ params: { slug } }: any) => {\n  const markdownWithMeta = fs.readFileSync(path.join('projects',\n    slug + '.mdx'), 'utf-8')\n\n    const options: any = [[rehypeImgSize, { dir: \"public\" }]];\n  const { data: frontMatter, content } = matter(markdownWithMeta)\n  const mdxSource = await serialize(content, {\n    mdxOptions: {\n      rehypePlugins: options\n    }\n  })\n  return {\n    props: {\n      meta: frontMatter,\n      slug,\n      mdxSource\n    }\n  }\n}\n\nexport { getStaticProps, getStaticPaths }\n\n//@ts-ignore","/Users/curauser/Projects/moerabaya.github.io/components/Footer.tsx",[],[],"/Users/curauser/Projects/moerabaya.github.io/components/Menu.tsx",[],[],{"ruleId":"54","severity":1,"message":"55","line":17,"column":5,"nodeType":"56","endLine":17,"endColumn":84},"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]